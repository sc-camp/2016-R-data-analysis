rm(list=ls())
# analysis of grouse
# import data file
GROUSE<-read.csv("grouse_shooting_mod.csv")
str(GROUSE)
# first will want to divide nr_shot by drive size to facilitate contrasts
GROUSE$shotperkm<-GROUSE$nr_shot/GROUSE$km2
# then examine distribution
hist(GROUSE$shotperkm)
# variable is bounded below and count data
# to keep things simple, let's see if a log transform will help
hist(log(GROUSE$shotperkm))
# looks like this will be better even if not perfect
# let's store the vector for later use
GROUSE$shot<-log(GROUSE$shotperkm)
# the counts will similarly need a log transform
GROUSE$count<-log(GROUSE$totalcount)
# now plot the relationship and predict effects
plot(shot~count,data=GROUSE)
# looks like a positive linear relationship (in log-log space), with slope approx 1
plot(shot~jitter(prev),data=GROUSE)
# looks like a negative relationship, maybe with slope around -0.5??
# but recall that we would really like to know ahead of time whether there is an interaction
# let's build a plot that separately illustrates the effects of previous shooting number on count
library(ggplot2)
ggplot(GROUSE, aes(x = count, y = shot)) +
geom_point() +
stat_smooth(method = "lm") +
facet_grid(. ~ prev)
# there is no strong evidence from these plots for an interaction, because the lines are more or less parallel
# however, it does look like the numbers of shot grouse are highest in the first shooting, followed by the second and third
# to start, let's keep things simple with the maximal linear model
g1<-lm(shot~count*prev,data=GROUSE)
par(mfrow=c(2,2))
plot(g1)
par(mfrow=c(1,1))
# QQ plot looks a bit weak, others OK
summary(g1)
# guess at coefficient for count not bad, but other suffers -- however interaction still in so model needs simplifying
g2<-update(g1,~. -count:prev)
anova(g1,g2)
# simpler model better, as expected
par(mfrow=c(2,2))
plot(g2)
par(mfrow=c(1,1))
# QQ maybe slightly better, still a bit poor
summary(g2)
# now guess for coefficients quite good, and supported statistically
# can't simplify further, because p-vals for linear models are already for p-on-deletion
# problems is that this linear model features pseudoreplication
# both moor and drive visited repeatedly, and would like to soak up the variance assoc with these factors
# but having done the fixed version of the model gives us a good idea of what to expect from a successful mixed mode, so it was worth starting there!
#Extending the linear model to account for pseudoreplication
#We know that we also have repeated measurements for some drives (hunting area) and drive is nested within moor (management unit owned by a single land owner). We need to address this by specifying the random effects in the model.
# What if we didn't use mixed effects models and added moor and drive as fixed effects? Let's try it out.
g4<-lm(shot~moor+drive+prev+count,data=GROUSE)
summary(g4)
#Why are there NA estimates in the summary output?
# Try these tables which tell you how many of each combination of moor and drive (and previous numbers of shootings) there are
xtabs(~moor+drive,data=GROUSE)
xtabs(~moor+drive+prev,data=GROUSE)
# most combinations are poorly represented, and the small overall sample means we don't have the degrees of freedom to estimate all the coefficients needed for a fixed model
#Let's try the same analysis in a mixed effect model framewoprk. In mixed effects models, we need to specify the random part of the model.
# I prefer the syntax of lme4 to that of nlme, but both are OK
library(lme4)
g1.mixed<-lmer(shot~prev*count+(1|moor)+(1|drive),data=GROUSE)
# not clear which diagnostics are most relevant, but can call the next one easily
plot(g1.mixed)
# also other plots that can clarify the dist of random effects for example
library(sjPlot)
library(arm)
sjp.lmer(g1.mixed)
summary(g1.mixed)
library(lme4)
install.packages("lme4")
install.packages("sjPlot")
install.packages("arm")
install.packages(c("boot", "lattice", "manipulate", "Matrix", "mgcv"))
#Mixed effects models
#AdvInR
#Script developed by Nils Bunnefeld, and modified by Luc BussiÃ¨re November 2014
# clear workspace
rm(list=ls())
# analysis of grouse
# import data file
GROUSE<-read.csv("grouse_shooting_mod.csv")
str(GROUSE)
# first will want to divide nr_shot by drive size to facilitate contrasts
GROUSE$shotperkm<-GROUSE$nr_shot/GROUSE$km2
# then examine distribution
hist(GROUSE$shotperkm)
# variable is bounded below and count data
# to keep things simple, let's see if a log transform will help
hist(log(GROUSE$shotperkm))
# looks like this will be better even if not perfect
# let's store the vector for later use
GROUSE$shot<-log(GROUSE$shotperkm)
# the counts will similarly need a log transform
GROUSE$count<-log(GROUSE$totalcount)
# now plot the relationship and predict effects
plot(shot~count,data=GROUSE)
# looks like a positive linear relationship (in log-log space), with slope approx 1
plot(shot~jitter(prev),data=GROUSE)
# looks like a negative relationship, maybe with slope around -0.5??
# but recall that we would really like to know ahead of time whether there is an interaction
# let's build a plot that separately illustrates the effects of previous shooting number on count
library(ggplot2)
ggplot(GROUSE, aes(x = count, y = shot)) +
geom_point() +
stat_smooth(method = "lm") +
facet_grid(. ~ prev)
# there is no strong evidence from these plots for an interaction, because the lines are more or less parallel
# however, it does look like the numbers of shot grouse are highest in the first shooting, followed by the second and third
# to start, let's keep things simple with the maximal linear model
g1<-lm(shot~count*prev,data=GROUSE)
par(mfrow=c(2,2))
plot(g1)
par(mfrow=c(1,1))
# QQ plot looks a bit weak, others OK
summary(g1)
# guess at coefficient for count not bad, but other suffers -- however interaction still in so model needs simplifying
g2<-update(g1,~. -count:prev)
anova(g1,g2)
# simpler model better, as expected
par(mfrow=c(2,2))
plot(g2)
par(mfrow=c(1,1))
# QQ maybe slightly better, still a bit poor
summary(g2)
# now guess for coefficients quite good, and supported statistically
# can't simplify further, because p-vals for linear models are already for p-on-deletion
# problems is that this linear model features pseudoreplication
# both moor and drive visited repeatedly, and would like to soak up the variance assoc with these factors
# but having done the fixed version of the model gives us a good idea of what to expect from a successful mixed mode, so it was worth starting there!
#Extending the linear model to account for pseudoreplication
#We know that we also have repeated measurements for some drives (hunting area) and drive is nested within moor (management unit owned by a single land owner). We need to address this by specifying the random effects in the model.
# What if we didn't use mixed effects models and added moor and drive as fixed effects? Let's try it out.
g4<-lm(shot~moor+drive+prev+count,data=GROUSE)
summary(g4)
#Why are there NA estimates in the summary output?
# Try these tables which tell you how many of each combination of moor and drive (and previous numbers of shootings) there are
xtabs(~moor+drive,data=GROUSE)
xtabs(~moor+drive+prev,data=GROUSE)
# most combinations are poorly represented, and the small overall sample means we don't have the degrees of freedom to estimate all the coefficients needed for a fixed model
#Let's try the same analysis in a mixed effect model framewoprk. In mixed effects models, we need to specify the random part of the model.
# I prefer the syntax of lme4 to that of nlme, but both are OK
library(lme4)
g1.mixed<-lmer(shot~prev*count+(1|moor)+(1|drive),data=GROUSE)
# not clear which diagnostics are most relevant, but can call the next one easily
plot(g1.mixed)
# also other plots that can clarify the dist of random effects for example
library(sjPlot)
library(arm)
sjp.lmer(g1.mixed)
summary(g1.mixed)
vars<- c(0.04510,0.08102,0.13114)
vars/sum(vars)
g2.mixed<-update(g1.mixed,~. - prev:count)
anova(g1.mixed,g2.mixed)
# notice the message in red telling us that R has refit the models using a different estimation procedure -- we compare models fit with ML, but report coefficients fit with REML
# the simpler model is preferred (if we believe the likelihood ratio test method for testing significance)
summary(g2.mixed)
# can we simplify further?
g3.mixed<-update(g2.mixed,~. - prev)
anova(g3.mixed,g2.mixed)
# can't lose prev
g4.mixed<-update(g2.mixed,~. - count)
anova(g4.mixed,g2.mixed)
# can't lose count either
# if we care about p-values, the two LR tests have provided some for us
# so min adequate model is g2.mixed
summary(g2.mixed)
# coeffs similar but not identical to those in fixed model
# why are df known for model simp, but not for tests of coefs?
# could also compare models with AIC
# because sample is small, may prefer AICc
# may need to install MuMIn, which has one implementation of AICc
library(MuMIn)
install.packages("MuMIn")
AICc(g1.mixed,g2.mixed,g3.mixed,g4.mixed)
library(MuMIn)
AICc(g1.mixed,g2.mixed,g3.mixed,g4.mixed)
# methods are in agreement
# best model is g2.mixed
#The summary looks like the one from linear models, but we have additional parts here. The most important are the variances of the random effects and th enumber of observations to check that we have done the right thing. Try to understand the three different parts, the random effects, the fixed effects and the data structure (Number of obs).
#report the predictions of the best fitting model using REML=TRUE because REML gives more robust estimates then ML; but REML is not suited for model comparison.
# make a publication quality plot
# could plot all three lines and all data on a single panel
plot(shot~count,data=GROUSE,
ylab="Grouse shot per km2 (log)",
xlab="Grouse counted per km2 (log)",
type="n")
# in the previous line, type ="n" suppresses plotting anything, so I can add points by group and better control how the plot looks
points(shot[prev=="1"]~count[prev=="1"],data=GROUSE, pch=20)
points(shot[prev=="2"]~count[prev=="2"],col="blue",data=GROUSE,
pch=20)
points(shot[prev=="3"]~count[prev=="3"],col="red",data=GROUSE,
pch=20)
abline(-3.98,1.4)
abline(-3.98-0.53,1.41,lty=3,col="blue")
abline(-3.98-0.94,1.41,lty=4,col="red")
#IMO this graph looks a bit messy. Use mfrow() to split the graphics area into three separate plotting areas, or use ggplot to make a publication quality figure
par(mfrow=c(1,3))
plot(shot~count,data=GROUSE,type="n",xlab="Grouse counted (log)", ylab="Number of grouse shot (log)",cex.lab=1.2)
title(main="First shooting event")
points(shot[prev=="1"]~count[prev=="1"],data=GROUSE,col="purple",pch=20)
abline(-3.98,1.4,col="purple")
plot(shot~count,data=GROUSE,type="n",xlab=" Grouse counted (log)",ylab="",cex.lab=1.2)
title(main="Second shooting event")
points(shot[prev=="2"]~count[prev=="2"],col="blue",data=GROUSE,
pch=20)
abline(-3.98-0.53,1.41,lty=3,col="blue")
plot(shot~count,data=GROUSE,type="n",xlab=" Grouse counted (log)", ylab="", cex.lab=1.2 )
title(main="Third/fourth shooting event")
points(shot[prev=="3"]~count[prev=="3"],col="red",data=GROUSE,
pch=20)
abline(-3.98-0.94,1.41,lty=4,col="red")
par(mfrow=c(1,1))
# SuppEx
# clear workspace
# rm(list=ls())
# import data file
FLIES<-read.csv("KatieFlies4R.csv")
str(FLIES)
# recode family ID as factor
FLIES$Maternal.Fam<-as.factor(FLIES$Maternal.Fam)
FLIES$Paternal.Fam<-as.factor(FLIES$Paternal.Fam)
names(FLIES)
# select males
MFLIES<-FLIES[FLIES$Sex=="M",]
# want to play with data on mass so need to check dist
hist(MFLIES$Wet.Mass)
# looks great
# visualize effects of temp on male mass by pop
library(ggplot2)
ggplot(MFLIES, aes(x = Temp, y = Wet.Mass)) +
geom_point() +
stat_smooth(method="lm") +
facet_grid(.~ Population)
# looks like temp has a negative effect on mass, but maybe in only some sex:pop combinations
# build a fixed model first
Mfixed.mod1<-lm(Wet.Mass~Temp,data=MFLIES)
par(mfrow=c(2,2))
plot(Mfixed.mod1)
par(mfrow=c(1,1))
# looks good
summary(Mfixed.mod1)
# support for interaction, but pseudorep
# could add in Population as fixed factor
Mfixed.mod2<-lm(Wet.Mass~Temp*Population,data=MFLIES)
par(mfrow=c(2,2))
plot(Mfixed.mod2)
par(mfrow=c(1,1))
# problems with QQ plot at lower end
summary(Mfixed.mod2)
# seem to be some strong Pop effects, but model the same
# can I remove Int?
anova(Mfixed.mod2,Mfixed.mod1)
# nope
# F test says we need to keep int, but this is still pseudoreplicated
# so now try mixed model, first without "interaction" between temp and Pop
names(MFLIES)
library(lme4)
Mmixed.mod1<-lmer(Wet.Mass~Temp*Population+(1|Maternal.Fam)+(1|Paternal.Fam),data=MFLIES)
summary(Mmixed.mod1)
vcov(Mmixed.mod1)
# population not soaking up much variance
# is it important?
Mmixed.mod2<-update(Mmixed.mod1,~. - Temp:Population)
anova(Mmixed.mod1,Mmixed.mod2)
# yup, so far
# OK now, let's try fitting pop as a random effect
Mmixed.mod3<-lmer(Wet.Mass~Temp+(1|Population)+(1|Maternal.Fam)+(1|Paternal.Fam),data=MFLIES)
summary(Mmixed.mod3)
# simpler output, but no temp by pop int
# now can we get effects of temp to vary by population?
Mmixed.mod4<-lmer(Wet.Mass~Temp+(Temp|Population)+(1|Maternal.Fam)+(1|Paternal.Fam),data=MFLIES)
anova(Mmixed.mod4,Mmixed.mod3)
# mod 4 slightly better than mod3
# examine diagnostics now? a bit late, but until now we were converging on the big model
plot(Mmixed.mod4)
sjp.lmer(Mmixed.mod4)
summary(Mmixed.mod4)
# now how to illustrate effects
str(Mmixed.mod4)
str(MFLIES)
NEWTEMP<-expand.grid(Temp=seq(18,22,length=10),Population=levels(MFLIES$Population),Maternal.Fam=levels(MFLIES$Maternal.Fam),Paternal.Fam=levels(MFLIES$Paternal.Fam))
PREDMASS<-predict(Mmixed.mod4,newdata=NEWTEMP,re.form=~(Temp|Population))
PREDSFRAME<-cbind(NEWTEMP,PREDMASS)
head(PREDSFRAME)
# figure below needs cleaning (with proper labels for axes and pops, but you get the idea)
ggplot(PREDSFRAME, aes(x = Temp, y = PREDMASS)) +
geom_line() +
facet_grid(. ~ Population)
summary(Mmixed.mod4)
