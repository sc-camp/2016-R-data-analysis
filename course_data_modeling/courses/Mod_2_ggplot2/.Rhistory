##
#
# 'Advancing in R' course
#
# Visualising data
#
##
# Install packages if necessary
install.packages("ggplot2")
# Load libraries
library(dplyr)
library(ggplot2)
# Load data package for use in this practical
data(diamonds)
str(diamonds)
?diamonds
##### My first scatterplot ######
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
## Random sample of 2000 rows from the data set
mydiamonds <- sample_n(diamonds, 2000)
## Plot again...
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_point()
###### Investigating geoms (geometric representations of data) ######
###### Histograms ######
ggplot(mydiamonds, aes(x = price)) +
geom_histogram()
# Modify bin size
ggplot(mydiamonds, aes(x = price)) +
geom_histogram(binwidth = 500)
# Play with other parameters of the histogram
ggplot(mydiamonds, aes(x = price)) +
geom_histogram(binwidth = 500,
fill = "white",
colour = "black")
###### Scatterplots ######
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_jitter(position = position_jitter(width = 0.1))
# You can play with the amount of jitter on the x axis...
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_jitter(position = position_jitter(width = 0.5))
###### Boxplots ######
ggplot(mydiamonds, aes(x = color, y = price)) +
geom_boxplot()
# Add jittered points
ggplot(mydiamonds, aes(x = color, y = price)) +
geom_boxplot() +
geom_jitter(position = position_jitter(width = 0.1))
###### Statistical transformations ######
###### Summarising data ######
ggplot(mydiamonds, aes(x = color, y = price)) +
geom_boxplot() +
stat_summary(fun.y = "mean",
geom = "point",
shape = 5,
size = 4)
# Identify min/max values
ggplot(mydiamonds, aes(x = color, y = price)) +
geom_boxplot() +
stat_summary(fun.y = "min",
geom = "point",
shape = 5,
size = 4) +
stat_summary(fun.y = "max",
geom = "point",
shape = 5,
size = 4)
###### Smoothers ######
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm")
# Colour the points (according to variable color), but retain a single smoother
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_jitter(position = position_jitter(width = 0.1),
aes(colour = color)) +
stat_smooth(method = "lm")
# Colour the points (according to variable color),
#  with a smoother for each level of variable color
ggplot(mydiamonds, aes(x = carat, y = price, colour = color)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm")
###### Faceting ######
## Facet grids
ggplot(mydiamonds, aes(x = carat, y = price, colour = color)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm") +
facet_grid(. ~ color)
# Redundancy is COLOR: note above that it has been specified twice
ggplot(mydiamonds, aes(x = carat, y = price)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm") +
facet_grid(. ~ color)
## Facet wraps
ggplot(mydiamonds, aes(x = carat, y = price, colour = color)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm") +
facet_wrap(~ cut)
## What is the difference when we free the scales for each panel?
ggplot(mydiamonds, aes(x = carat, y = price, colour = color)) +
geom_jitter(position = position_jitter(width = 0.1)) +
stat_smooth(method = "lm") +
facet_wrap(~ cut, scales = "free")
###### Supplementary exercises ######
###### Time series data ######
OBK <- read.csv("OBrienKaiser.csv")
## Also available through 'car' package
OBK_tidy <- OBK %>%
rename(ID = X) %>%
gather(Time, Measurement, pre.1:fup.5) %>%
separate(Time, into = c("Period", "Time"), sep = "\\.") %>%
head(30)
OBK_tidy %>%
ggplot(aes(x = Time,
y = Measurement,
colour = treatment,
size = 4,
alpha = 0.9)) +
geom_point() +
geom_line(aes(group = ID)) +
facet_grid(. ~ Period)
OBK_tidy %>%
ggplot(aes(x = Time,
y = Measurement,
colour = treatment,
size = 4,
alpha = 0.9)) +
geom_point() +
geom_line(aes(group = ID)) +
facet_grid(gender ~ Period)
###### Piping data manipulations into scatterplots ######
library(Lahman)
data(Batting)
Batting %>%
select(playerID, yearID, HR) %>%
filter(HR > 0) %>%
arrange(desc(yearID), desc(HR)) %>%
distinct(yearID) %>%
ggplot(aes(x = yearID, y = HR)) +
geom_point() +
stat_smooth(method = "lm")
